name: Data-Driven Model Training

on:
  push:
    paths:
      - 'data/raw/iris.csv.dvc'
    branches:
      - develop
      - master
  workflow_dispatch:
    inputs:
      force_promotion:
        description: 'Force promotion to production'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  packages: write
  actions: read

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  data-validation-and-training:
    runs-on: ubuntu-latest
    name: "Data Validation & Model Training"
    
    outputs:
      model_trained: ${{ steps.training.outputs.model_trained }}
      run_id: ${{ steps.training.outputs.run_id }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install uv
        run: pip install uv
      
      - name: Create virtual environment
        run: uv venv .venv
      
      - name: Install dependencies
        run: uv pip install -e .
      
      - name: Create necessary directories
        run: mkdir -p logs artifacts data/processed models/production_model
      
      - name: Setup data
        run: |
          if [ ! -f "data/raw/iris.csv" ]; then
            echo "Creating sample iris data..."
            python -c "
            from sklearn.datasets import load_iris
            import pandas as pd
            iris = load_iris(as_frame=True)
            df = pd.concat([iris.data, pd.Series(iris.target, name='target')], axis=1)
            df.to_csv('data/raw/iris.csv', index=False)
            "
          fi
      
      - name: Train model on updated data
        id: training
        run: |
          echo "Starting model training on updated data..."
          
          # Run training script and capture only the run ID
          RUN_ID=$(uv run python scripts/train_on_data_update.py 2>&1 | tail -n 1 | grep -E '^[a-f0-9]{32}$')
          TRAINING_EXIT_CODE=$?
          
          if [ $TRAINING_EXIT_CODE -eq 0 ] && [ ! -z "$RUN_ID" ]; then
            echo "model_trained=true" >> $GITHUB_OUTPUT
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
            echo "Model training successful. Run ID: $RUN_ID"
          else
            echo "model_trained=false" >> $GITHUB_OUTPUT
            echo "Model training failed or did not meet criteria"
            echo "Captured output: $RUN_ID"
            exit 1
          fi
      
      - name: Upload training artifacts
        if: steps.training.outputs.model_trained == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: training-artifacts
          path: |
            artifacts/
            logs/
          retention-days: 30

  promote-to-staging:
    runs-on: ubuntu-latest
    name: "Promote to Staging"
    needs: data-validation-and-training
    if: needs.data-validation-and-training.outputs.model_trained == 'true'
    
    outputs:
      staging_promoted: ${{ steps.staging.outputs.staging_promoted }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv .venv
          uv pip install -e .
      
      - name: Download training artifacts
        uses: actions/download-artifact@v4
        with:
          name: training-artifacts
      
      - name: Promote model to staging
        id: staging
        env:
          RUN_ID: ${{ needs.data-validation-and-training.outputs.run_id }}
        run: |
          echo "Promoting model to staging..."
          
          # Run staging promotion
          if uv run python scripts/promote_to_staging.py --run_id $RUN_ID; then
            echo "staging_promoted=true" >> $GITHUB_OUTPUT
            echo "Model promoted to staging successfully"
          else
            echo "staging_promoted=false" >> $GITHUB_OUTPUT
            echo "Failed to promote model to staging"
            exit 1
          fi
      
      - name: Upload staging artifacts
        if: steps.staging.outputs.staging_promoted == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: staging-artifacts
          path: |
            artifacts/
            logs/
          retention-days: 30

  promote-to-production:
    runs-on: ubuntu-latest
    name: "Promote to Production"
    needs: [data-validation-and-training, promote-to-staging]
    if: |
      needs.promote-to-staging.outputs.staging_promoted == 'true' && 
      (github.ref == 'refs/heads/master' || github.event.inputs.force_promotion == 'true')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv .venv
          uv pip install -e .
      
      - name: Download staging artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-artifacts
      
      - name: Promote model to production
        env:
          FORCE_PROMOTION: ${{ github.event.inputs.force_promotion }}
        run: |
          echo "Promoting staging model to production..."
          
          FORCE_FLAG=""
          if [ "$FORCE_PROMOTION" = "true" ]; then
            FORCE_FLAG="--force"
          fi
          
          if uv run python scripts/promote_to_production.py $FORCE_FLAG; then
            echo "Model promoted to production successfully"
          else
            echo "Failed to promote model to production"
            exit 1
          fi
      
      - name: Commit production model updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add production model files
          git add models/production_model/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update production model from data-driven training [skip ci]"
            git push
          fi

  notify-completion:
    runs-on: ubuntu-latest
    name: "Pipeline Completion Notification"
    needs: [data-validation-and-training, promote-to-staging, promote-to-production]
    if: always()
    
    steps:
      - name: Pipeline Summary
        run: |
          echo "=== Data-Driven ML Pipeline Summary ==="
          echo "Training: ${{ needs.data-validation-and-training.result }}"
          echo "Staging: ${{ needs.promote-to-staging.result }}"
          echo "Production: ${{ needs.promote-to-production.result }}"
          
          if [ "${{ needs.promote-to-production.result }}" = "success" ]; then
            echo "üéâ Full pipeline completed successfully!"
            echo "‚úÖ Model trained on updated data"
            echo "‚úÖ Model promoted to staging"  
            echo "‚úÖ Model promoted to production"
            echo "‚úÖ Production model updated"
          elif [ "${{ needs.promote-to-staging.result }}" = "success" ]; then
            echo "‚ö†Ô∏è Pipeline partially completed"
            echo "‚úÖ Model trained and promoted to staging"
            echo "‚ùå Production promotion skipped (not on master branch)"
          else
            echo "‚ùå Pipeline failed"
          fi