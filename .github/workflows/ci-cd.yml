name: CI & CD Pipeline

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (overrides branch)'
        required: false
        default: ''
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  pull-requests: write
  packages: write
  actions: read

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  ci:
    runs-on: ubuntu-latest
    name: "CI: Lint, Format, Test"
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: pip install uv

      - name: Create virtual environment
        run: uv venv .venv

      - name: Install dependencies
        run: uv pip install pytest pytest-cov ruff black isort mypy pre-commit

      - name: Create necessary directories
        run: |
          mkdir -p logs
          mkdir -p models/production_model
          mkdir -p data/processed

      - name: Lint with ruff
        run: uv run ruff check . --select E,F,W

      - name: Check code format
        run: |
          uv run black --check .
          uv run isort --check-only .
          uv run mypy .

      - name: Run unit tests
        run: uv run pytest tests/test_api.py -v --cov=api --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: ci
    if: needs.ci.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-api
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create necessary directories
        run: |
          mkdir -p logs
          mkdir -p models/production_model
          mkdir -p data/processed

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: api
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: ui
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and push MLflow image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: mlflow
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Update docker-compose with new images
        run: |
          sed -i "s|image: .*mlops-api.*|image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.ref_name }}|g" docker-compose.yml
          sed -i "s|image: .*mlops-ui.*|image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.ref_name }}|g" docker-compose.yml
          sed -i "s|image: .*mlops-mlflow.*|image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.ref_name }}|g" docker-compose.yml

      - name: Test Docker images
        run: |
          # Test API image
          echo "Starting API container..."
          docker run --rm -d --name test-api -p 8000:8000 ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.ref_name }}
          
          # Wait for API to be ready
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "API is ready!"
              break
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done
          
          # Check if API is actually ready
          if ! curl -f http://localhost:8000/health; then
            echo "API health check failed. Container logs:"
            docker logs test-api
            docker stop test-api
            exit 1
          fi
          
          docker stop test-api
          echo "API test passed!"
          
          # Skip UI test for now as it's more complex
          echo "Skipping UI test - API test passed successfully"

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/master' && 'production') || (github.ref == 'refs/heads/develop' && 'staging') }}
    steps:
      - name: Deploy
        run: |
          echo "ðŸš€ Deploying to ${{ job.environment }} environment"
          echo "API Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.ref_name }}"
          echo "UI Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.ref_name }}"
          echo "MLflow Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.ref_name }}"
          # Add your deployment commands here

      - name: Notify success
        if: success()
        run: echo "âœ… Deployment to ${{ job.environment }} completed successfully!"
