name: CI-CD Pipeline

permissions:
  contents: read
  packages: write
  actions: read

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [master, develop]
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  # Debug and check CI workflow success
  check-ci-success:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' || github.event_name == 'workflow_dispatch'
    outputs:
      ci-success: ${{ steps.check.outputs.success }}
    steps:
      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run name: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.ref }}"
          
      - name: Check CI success
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger - proceeding"
            echo "success=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "CI workflow completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "CI workflow did not succeed"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: check-ci-success
    if: needs.check-ci-success.outputs.ci-success == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-api
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create necessary directories
        run: |
          mkdir -p logs
          mkdir -p models/production_model
          mkdir -p data/processed

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: api
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:latest
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.sha }}
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push UI image  
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: ui
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:latest
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.sha }}
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push MLflow image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: mlflow
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:latest
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.sha }}
            ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update docker-compose with new images
        run: |
          sed -i "s|image: .*mlops-api.*|image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.sha }}|g" docker-compose.yml
          sed -i "s|image: .*mlops-ui.*|image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.sha }}|g" docker-compose.yml
          sed -i "s|image: .*mlops-mlflow.*|image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.sha }}|g" docker-compose.yml

      - name: Test Docker images
        run: |
          # Test API image
          docker run --rm -d --name test-api -p 8000:8000 ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-api
          
          # Test UI image  
          docker run --rm -d --name test-ui -p 8501:8501 ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.sha }}
          sleep 15
          curl -f http://localhost:8501/_stcore/health || exit 1
          docker stop test-ui

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          echo "API Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.sha }}"
          echo "UI Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.sha }}"
          echo "MLflow Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.sha }}"
          # Add your staging deployment commands here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment"
          echo "API Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-api:${{ github.sha }}"
          echo "UI Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-ui:${{ github.sha }}"
          echo "MLflow Image: ${{ env.DOCKER_HUB_USERNAME }}/mlops-mlflow:${{ github.sha }}"
          # Add your production deployment commands here

      - name: Notify deployment success
        run: |
          echo "âœ… Production deployment completed successfully!"